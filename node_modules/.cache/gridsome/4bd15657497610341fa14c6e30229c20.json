{"remainingRequest":"F:\\xampp\\htdocs\\gridsome-portfolio-starter\\node_modules\\babel-loader\\lib\\index.js??ref--1-1!F:\\xampp\\htdocs\\gridsome-portfolio-starter\\node_modules\\gridsome\\app\\utils\\helpers.js","dependencies":[{"path":"F:\\xampp\\htdocs\\gridsome-portfolio-starter\\node_modules\\gridsome\\app\\utils\\helpers.js","mtime":499162500000},{"path":"F:\\xampp\\htdocs\\gridsome-portfolio-starter\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\xampp\\htdocs\\gridsome-portfolio-starter\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _slicedToArray from \"F:\\\\xampp\\\\htdocs\\\\gridsome-portfolio-starter\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.replace\";\nvar publicPath = process.env.PUBLIC_PATH;\nexport function unslash(string) {\n  return string.replace(/^\\/+|\\/+$/g, '');\n}\nexport function unslashStart(string) {\n  return string.replace(/^\\/+/g, '');\n}\nexport function unslashEnd(string) {\n  return string.replace(/\\/+$/g, '');\n}\nexport function url(string) {\n  return \"\".concat(publicPath).concat(string).replace(/\\/+/g, '/');\n}\nexport function stripPageParam(route) {\n  var path = route.path,\n      page = route.params.page;\n  var normalizedPath = unslashEnd(path);\n  return page && /^\\d+$/.test(page) && /\\/\\d+$/.test(normalizedPath) ? normalizedPath.split('/').slice(0, -1).join('/') || '/' : normalizedPath || '/';\n}\nvar re = new RegExp(\"^\".concat(publicPath));\nvar replacement = publicPath !== '/' ? '' : '/';\nexport function stripPathPrefix(string) {\n  return string.replace(re, replacement);\n}\nexport function parsePath(path) {\n  var pathname = path || '/';\n  var query = '';\n  var hash = '';\n\n  var _path$split = path.split('#');\n\n  var _path$split2 = _slicedToArray(_path$split, 2);\n\n  pathname = _path$split2[0];\n  var _path$split2$ = _path$split2[1];\n  hash = _path$split2$ === void 0 ? '' : _path$split2$;\n\n  var _pathname$split = pathname.split('?');\n\n  var _pathname$split2 = _slicedToArray(_pathname$split, 2);\n\n  pathname = _pathname$split2[0];\n  var _pathname$split2$ = _pathname$split2[1];\n  query = _pathname$split2$ === void 0 ? '' : _pathname$split2$;\n  return {\n    pathname: pathname,\n    query: query ? \"?\".concat(query) : '',\n    hash: hash ? \"#\".concat(hash) : ''\n  };\n}\nexport function normalizePath() {\n  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';\n  // TODO: warn if path misses a leading slash\n  return \"/\".concat(unslashStart(path)).replace(/\\/+/g, '/');\n}",null]}