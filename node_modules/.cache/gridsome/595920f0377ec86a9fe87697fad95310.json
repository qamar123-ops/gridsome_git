{"remainingRequest":"F:\\xampp\\htdocs\\gridsome_git\\node_modules\\babel-loader\\lib\\index.js??ref--1-1!F:\\xampp\\htdocs\\gridsome_git\\node_modules\\gridsome\\app\\utils\\helpers.js","dependencies":[{"path":"F:\\xampp\\htdocs\\gridsome_git\\node_modules\\gridsome\\app\\utils\\helpers.js","mtime":499162500000},{"path":"F:\\xampp\\htdocs\\gridsome_git\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\xampp\\htdocs\\gridsome_git\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _slicedToArray from \"F:\\\\xampp\\\\htdocs\\\\gridsome_git\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.replace\";\nvar publicPath = process.env.PUBLIC_PATH;\nexport function unslash(string) {\n  return string.replace(/^\\/+|\\/+$/g, '');\n}\nexport function unslashStart(string) {\n  return string.replace(/^\\/+/g, '');\n}\nexport function unslashEnd(string) {\n  return string.replace(/\\/+$/g, '');\n}\nexport function url(string) {\n  return \"\".concat(publicPath).concat(string).replace(/\\/+/g, '/');\n}\nexport function stripPageParam(route) {\n  var path = route.path,\n      page = route.params.page;\n  var normalizedPath = unslashEnd(path);\n  return page && /^\\d+$/.test(page) && /\\/\\d+$/.test(normalizedPath) ? normalizedPath.split('/').slice(0, -1).join('/') || '/' : normalizedPath || '/';\n}\nvar re = new RegExp(\"^\".concat(publicPath));\nvar replacement = publicPath !== '/' ? '' : '/';\nexport function stripPathPrefix(string) {\n  return string.replace(re, replacement);\n}\nexport function parsePath(path) {\n  var pathname = path || '/';\n  var query = '';\n  var hash = '';\n\n  var _path$split = path.split('#');\n\n  var _path$split2 = _slicedToArray(_path$split, 2);\n\n  pathname = _path$split2[0];\n  var _path$split2$ = _path$split2[1];\n  hash = _path$split2$ === void 0 ? '' : _path$split2$;\n\n  var _pathname$split = pathname.split('?');\n\n  var _pathname$split2 = _slicedToArray(_pathname$split, 2);\n\n  pathname = _pathname$split2[0];\n  var _pathname$split2$ = _pathname$split2[1];\n  query = _pathname$split2$ === void 0 ? '' : _pathname$split2$;\n  return {\n    pathname: pathname,\n    query: query ? \"?\".concat(query) : '',\n    hash: hash ? \"#\".concat(hash) : ''\n  };\n}\nexport function normalizePath() {\n  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';\n  // TODO: warn if path misses a leading slash\n  return \"/\".concat(unslashStart(path)).replace(/\\/+/g, '/');\n}",{"version":3,"sources":["F:\\xampp\\htdocs\\gridsome_git\\node_modules\\gridsome\\app\\utils\\helpers.js"],"names":["publicPath","process","env","PUBLIC_PATH","unslash","string","replace","unslashStart","unslashEnd","url","stripPageParam","route","path","page","params","normalizedPath","test","split","slice","join","re","RegExp","replacement","stripPathPrefix","parsePath","pathname","query","hash","normalizePath"],"mappings":";;;;AAAA,IAAMA,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,WAA/B;AAEA,OAAO,SAASC,OAAT,CAAkBC,MAAlB,EAA0B;AAC/B,SAAOA,MAAM,CAACC,OAAP,CAAe,YAAf,EAA6B,EAA7B,CAAP;AACD;AAED,OAAO,SAASC,YAAT,CAAuBF,MAAvB,EAA+B;AACpC,SAAOA,MAAM,CAACC,OAAP,CAAe,OAAf,EAAwB,EAAxB,CAAP;AACD;AAED,OAAO,SAASE,UAAT,CAAqBH,MAArB,EAA6B;AAClC,SAAOA,MAAM,CAACC,OAAP,CAAe,OAAf,EAAwB,EAAxB,CAAP;AACD;AAED,OAAO,SAASG,GAAT,CAAcJ,MAAd,EAAsB;AAC3B,SAAO,UAAGL,UAAH,SAAgBK,MAAhB,EAAyBC,OAAzB,CAAiC,MAAjC,EAAyC,GAAzC,CAAP;AACD;AAED,OAAO,SAASI,cAAT,CAAyBC,KAAzB,EAAgC;AAAA,MAC7BC,IAD6B,GACHD,KADG,CAC7BC,IAD6B;AAAA,MACbC,IADa,GACHF,KADG,CACvBG,MADuB,CACbD,IADa;AAErC,MAAME,cAAc,GAAGP,UAAU,CAACI,IAAD,CAAjC;AAEA,SAAOC,IAAI,IAAI,QAAQG,IAAR,CAAaH,IAAb,CAAR,IAA8B,SAASG,IAAT,CAAcD,cAAd,CAA9B,GACHA,cAAc,CAACE,KAAf,CAAqB,GAArB,EAA0BC,KAA1B,CAAgC,CAAhC,EAAmC,CAAC,CAApC,EAAuCC,IAAvC,CAA4C,GAA5C,KAAoD,GADjD,GAEHJ,cAAc,IAAI,GAFtB;AAGD;AAED,IAAMK,EAAE,GAAG,IAAIC,MAAJ,YAAerB,UAAf,EAAX;AACA,IAAMsB,WAAW,GAAGtB,UAAU,KAAK,GAAf,GAAqB,EAArB,GAA0B,GAA9C;AACA,OAAO,SAASuB,eAAT,CAA0BlB,MAA1B,EAAkC;AACvC,SAAOA,MAAM,CAACC,OAAP,CAAec,EAAf,EAAmBE,WAAnB,CAAP;AACD;AAED,OAAO,SAASE,SAAT,CAAoBZ,IAApB,EAA0B;AAC/B,MAAIa,QAAQ,GAAGb,IAAI,IAAI,GAAvB;AACA,MAAIc,KAAK,GAAG,EAAZ;AACA,MAAIC,IAAI,GAAG,EAAX;;AAH+B,oBAKNf,IAAI,CAACK,KAAL,CAAW,GAAX,CALM;;AAAA;;AAK7BQ,EAAAA,QAL6B;AAAA;AAKnBE,EAAAA,IALmB,8BAKZ,EALY;;AAAA,wBAMLF,QAAQ,CAACR,KAAT,CAAe,GAAf,CANK;;AAAA;;AAM7BQ,EAAAA,QAN6B;AAAA;AAMnBC,EAAAA,KANmB,kCAMX,EANW;AAQ/B,SAAO;AACLD,IAAAA,QAAQ,EAARA,QADK;AAELC,IAAAA,KAAK,EAAEA,KAAK,cAAOA,KAAP,IAAiB,EAFxB;AAGLC,IAAAA,IAAI,EAAEA,IAAI,cAAOA,IAAP,IAAgB;AAHrB,GAAP;AAKD;AAED,OAAO,SAASC,aAAT,GAAoC;AAAA,MAAZhB,IAAY,uEAAL,GAAK;AACzC;AACA,SAAO,WAAIL,YAAY,CAACK,IAAD,CAAhB,EAAyBN,OAAzB,CAAiC,MAAjC,EAAyC,GAAzC,CAAP;AACD","sourcesContent":["const publicPath = process.env.PUBLIC_PATH\n\nexport function unslash (string) {\n  return string.replace(/^\\/+|\\/+$/g, '')\n}\n\nexport function unslashStart (string) {\n  return string.replace(/^\\/+/g, '')\n}\n\nexport function unslashEnd (string) {\n  return string.replace(/\\/+$/g, '')\n}\n\nexport function url (string) {\n  return `${publicPath}${string}`.replace(/\\/+/g, '/')\n}\n\nexport function stripPageParam (route) {\n  const { path, params: { page }} = route\n  const normalizedPath = unslashEnd(path)\n\n  return page && /^\\d+$/.test(page) && /\\/\\d+$/.test(normalizedPath)\n    ? normalizedPath.split('/').slice(0, -1).join('/') || '/'\n    : normalizedPath || '/'\n}\n\nconst re = new RegExp(`^${publicPath}`)\nconst replacement = publicPath !== '/' ? '' : '/'\nexport function stripPathPrefix (string) {\n  return string.replace(re, replacement)\n}\n\nexport function parsePath (path) {\n  let pathname = path || '/'\n  let query = ''\n  let hash = ''\n\n  ;[pathname, hash = ''] = path.split('#')\n  ;[pathname, query = ''] = pathname.split('?')\n\n  return {\n    pathname,\n    query: query ? `?${query}` : '',\n    hash: hash ? `#${hash}` : ''\n  }\n}\n\nexport function normalizePath (path = '/') {\n  // TODO: warn if path misses a leading slash\n  return `/${unslashStart(path)}`.replace(/\\/+/g, '/')\n}\n"]}]}